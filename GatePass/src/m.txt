GatePassServiceImpl
package com.Srec.gatepass.ServiceImplementation;
import com.Srec.gatepass.Dto.*;
import com.Srec.gatepass.Entity.*;
import com.Srec.gatepass.Repository.*;
import com.Srec.gatepass.Service.GatePassService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.stream.Collectors;
@Service
public class GatePassServiceImpl implements GatePassService {
    @Autowired
    private GatePassRepository gatePassRepository;
    @Autowired
    private StudentRepository studentRepository;
    @Autowired
    private TutorRepository tutorRepository;
    @Autowired
    private WardenRepository wardenRepository;
    @Autowired
    private SecurityRepository securityRepository;
    @Override
    public GatePassResponseDTO applyForGatePass(GatePassDTO gatePassDTO) {
        Student student = studentRepository.findById(gatePassDTO.getStudentId())
                .orElseThrow(() -> new RuntimeException("Student not found"));
        GatePass gatePass = new GatePass();
        gatePass.setReason(gatePassDTO.getReason());
        gatePass.setDate(gatePassDTO.getDate());
        gatePass.setStatus("PENDING");
        gatePass.setStudent(student);
       GatePass savedGatePass = gatePassRepository.save(gatePass);
        return mapToGatePassResponseDTO(savedGatePass);
    }
    @Override
    public List<GatePassResponseDTO> getAllGatePasses() {
        return gatePassRepository.findAll().stream()
                .map(this::mapToGatePassResponseDTO)
                .collect(Collectors.toList());
    }
    @Override
    public GatePassResponseDTO getGatePassById(Long id) {
        GatePass gatePass = gatePassRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("GatePass not found"));
        return mapToGatePassResponseDTO(gatePass);
    }
    @Override
    public GatePassResponseDTO approveByTutor(ApprovalDTO approvalDTO) {
        GatePass gatePass = gatePassRepository.findById(approvalDTO.getGatePassId())
                .orElseThrow(() -> new RuntimeException("GatePass not found"));
        Tutor tutor = tutorRepository.findById(approvalDTO.getApproverId())
                .orElseThrow(() -> new RuntimeException("Tutor not found"));
        gatePass.setTutor(tutor);
        gatePass.setStatus("APPROVED_BY_TUTOR");
        GatePass updatedGatePass = gatePassRepository.save(gatePass);
        return mapToGatePassResponseDTO(updatedGatePass);
    }
    @Override
    public GatePassResponseDTO approveByWarden(ApprovalDTO approvalDTO) {
        GatePass gatePass = gatePassRepository.findById(approvalDTO.getGatePassId())
                .orElseThrow(() -> new RuntimeException("GatePass not found"));
        Warden warden = wardenRepository.findById(approvalDTO.getApproverId())
                .orElseThrow(() -> new RuntimeException("Warden not found"));
        gatePass.setWarden(warden);
        gatePass.setStatus("APPROVED_BY_TUTOR_AND_WARDEN");
        GatePass updatedGatePass = gatePassRepository.save(gatePass);
        return mapToGatePassResponseDTO(updatedGatePass);
    }
    @Override
    public GatePassResponseDTO approveBySecurity(ApprovalDTO approvalDTO) {
        GatePass gatePass = gatePassRepository.findById(approvalDTO.getGatePassId())
                .orElseThrow(() -> new RuntimeException("GatePass not found"));
        Security security = securityRepository.findById(approvalDTO.getApproverId())
                .orElseThrow(() -> new RuntimeException("Security not found"));
        gatePass.setSecurity(security);
        gatePass.setStatus("PASS_AVAILED_BY_STUDENT");
        GatePass updatedGatePass = gatePassRepository.save(gatePass);
        return mapToGatePassResponseDTO(updatedGatePass);
    }
    @Override
    public GatePassResponseDTO rejectGatePass(Long gatePassId) {
        GatePass gatePass = gatePassRepository.findById(gatePassId)
                .orElseThrow(() -> new RuntimeException("GatePass not found"));
        gatePass.setStatus("REJECTED");
        GatePass updatedGatePass = gatePassRepository.save(gatePass);
        return mapToGatePassResponseDTO(updatedGatePass);
    }
    private GatePassResponseDTO mapToGatePassResponseDTO(GatePass gatePass) {
        GatePassResponseDTO responseDTO = new GatePassResponseDTO();
        responseDTO.setId(gatePass.getId());
        responseDTO.setReason(gatePass.getReason());
        responseDTO.setDate(gatePass.getDate());
        responseDTO.setStatus(gatePass.getStatus());
        responseDTO.setStudentId(gatePass.getStudent().getId());
        responseDTO.setTutorId(gatePass.getTutor() != null ? gatePass.getTutor().getId() : null);
        responseDTO.setWardenId(gatePass.getWarden() != null ? gatePass.getWarden().getId() : null);
        responseDTO.setSecurityId(gatePass.getSecurity() != null ? gatePass.getSecurity().getId() : null);
        return responseDTO;
    }
}

GatePassService
package com.Srec.gatepass.Service;
import com.Srec.gatepass.Dto.ApprovalDTO;
import com.Srec.gatepass.Dto.GatePassDTO;
import com.Srec.gatepass.Dto.GatePassResponseDTO;
import java.util.List;
public  interface GatePassService {
    GatePassResponseDTO applyForGatePass(GatePassDTO gatePassDTO);
    GatePassResponseDTO approveByTutor(ApprovalDTO approvalDTO);
    GatePassResponseDTO approveByWarden(ApprovalDTO approvalDTO);
    GatePassResponseDTO approveBySecurity(ApprovalDTO approvalDTO);
    GatePassResponseDTO rejectGatePass(Long gatePassId);
    List<GatePassResponseDTO> getAllGatePasses();
    GatePassResponseDTO getGatePassById(Long id);
}
WardenRepository
package com.Srec.gatepass.Repository;
import com.Srec.gatepass.Entity.Warden;
import org.springframework.data.jpa.repository.JpaRepository;
public interface WardenRepository extends JpaRepository<Warden, Long> {}

TutorRepository
package com.Srec.gatepass.Repository;
import com.Srec.gatepass.Entity.Tutor;
import org.springframework.data.jpa.repository.JpaRepository;
public interface TutorRepository extends JpaRepository<Tutor, Long> {}

StudentRepository
package com.Srec.gatepass.Repository;
import com.Srec.gatepass.Entity.Student;
import org.springframework.data.jpa.repository.JpaRepository;
public interface StudentRepository extends JpaRepository<Student, Long> {}

SecurityRepository
package com.Srec.gatepass.Repository;
import com.Srec.gatepass.Entity.Security;
import org.springframework.data.jpa.repository.JpaRepository;
public interface SecurityRepository extends JpaRepository<Security, Long> {
}

GatePassRepository
package com.Srec.gatepass.Repository;
import com.Srec.gatepass.Entity.GatePass;
import org.springframework.data.jpa.repository.JpaRepository;
public interface GatePassRepository extends JpaRepository<GatePass, Long> {}

Entity
Warden
package com.Srec.gatepass.Entity;
import jakarta.persistence.*;
@Entity
public class Warden {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String email;
    // Getters and Setters
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public String getEmail() {
        return email;
    }
    public void setEmail(String email) {
        this.email = email;
    }
}

Tutor
package com.Srec.gatepass.Entity;
import jakarta.persistence.*;
@Entity
public class Tutor {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String email;
    // Getters and Setters
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public String getEmail() {
        return email;
    }
    public void setEmail(String email) {
        this.email = email;
    }
}


Student
package com.Srec.gatepass.Entity;
import jakarta.persistence.*;
@Entity
public class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String email;
    private String department;
    // Getters and Setters
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public String getEmail() {
        return email;
    }
    public void setEmail(String email) {
        this.email = email;
    }
    public String getDepartment() {
        return department;
    }
    public void setDepartment(String department) {
        this.department = department;
    }
}

Security
package com.Srec.gatepass.Entity;
import jakarta.persistence.*;
@Entity
public class Security {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String email;
    // Getters and Setters
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public String getEmail() {
        return email;
    }
    public void setEmail(String email) {
        this.email = email;
    }
}

GatePass
package com.Srec.gatepass.Entity;
import jakarta.persistence.*;
import lombok.Data;
@Entity
@Data
public class GatePass {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String reason;
    private String date;
    private String status; // PENDING, APPROVED_BY_TUTOR, APPROVED_BY_WARDEN, REJECTED, APPROVED
    @ManyToOne
    @JoinColumn(name = "student_id")
    private Student student;
    @ManyToOne
    @JoinColumn(name = "tutor_id")
    private Tutor tutor;
    @ManyToOne
    @JoinColumn(name = "warden_id")
    private Warden warden;
    @ManyToOne
    @JoinColumn(name = "security_id")
    private Security security;
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getReason() {
        return reason;
    }
    public void setReason(String reason) {
        this.reason = reason;
    }
    public String getDate() {
        return date;
    }
    public void setDate(String date) {
        this.date = date;
    }
    public String getStatus() {
        return status;
    }
    public void setStatus(String status) {
        this.status = status;
    }
    public Student getStudent() {
        return student;
    }
    public void setStudent(Student student) {
        this.student = student;
    }
    public Tutor getTutor() {
        return tutor;
    }
    public void setTutor(Tutor tutor) {
        this.tutor = tutor;
    }
    public Warden getWarden() {
        return warden;
   }
    public void setWarden(Warden warden) {
        this.warden = warden;
   }
    public Security getSecurity() {
        return security;
    }
    public void setSecurity(Security security) {
        this.security = security;
    }
}


GatePassResponseDTO
package com.Srec.gatepass.Dto;
public class GatePassResponseDTO {
    private Long id;
    private String reason;
    private String date;
    private String status;
    private Long studentId;
    private Long tutorId;
    private Long wardenId;
    private Long securityId;
    // Getters and Setters
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getReason() {
        return reason;
    }
    public void setReason(String reason) {
        this.reason = reason;
    }
    public String getDate() {
        return date;
    }
    public void setDate(String date) {
        this.date = date;
    }
    public String getStatus() {
        return status;
    }
    public void setStatus(String status) {
        this.status = status;
    }
    public Long getStudentId() {
        return studentId;
    }
    public void setStudentId(Long studentId) {
        this.studentId = studentId;
    }
    public Long getTutorId() {
        return tutorId;
    }
    public void setTutorId(Long tutorId) {
        this.tutorId = tutorId;
    }
    public Long getWardenId() {
        return wardenId;
    }
    public void setWardenId(Long wardenId) {
        this.wardenId = wardenId;
    }
    public Long getSecurityId() {
        return securityId;
    }
    public void setSecurityId(Long securityId) {
        this.securityId = securityId;
    }
}

GatePassDTO
package com.Srec.gatepass.Dto;
public class GatePassDTO {
    private String reason;
    private String date;
    private Long studentId;
    // Getters and Setters
    public String getReason() {
        return reason;
    }
    public void setReason(String reason) {
        this.reason = reason;
    }
    public String getDate() {
        return date;
    }
    public void setDate(String date) {
        this.date = date;
    }
    public Long getStudentId() {
        return studentId;
    }
    public void setStudentId(Long studentId) {
        this.studentId = studentId;
   }
}

ApprovalDTO
package com.Srec.gatepass.Dto;
public class ApprovalDTO {
    private Long gatePassId;
    private Long approverId;
    private String status;
    // Getters and Setters
    public Long getGatePassId() {
        return gatePassId;
    }
    public void setGatePassId(Long gatePassId) {
        this.gatePassId = gatePassId;
    }
    public Long getApproverId() {
        return approverId;
    }
    public void setApproverId(Long approverId) {
        this.approverId = approverId;
    }
   public String getStatus(){
        return status;
    }
   public void setStatus(String status){
        this.status=status;
    }
}

GatePassController
package com.Srec.gatepass.Controller;
import com.Srec.gatepass.Dto.ApprovalDTO;
import com.Srec.gatepass.Dto.GatePassDTO;
import com.Srec.gatepass.Dto.GatePassResponseDTO;
import com.Srec.gatepass.Service.GatePassService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;
@RestController
@RequestMapping("/api/gatepass")
public class GatePassController {
    @Autowired
    private GatePassService gatePassService;
    @PostMapping
    public ResponseEntity<GatePassResponseDTO> applyForGatePass(@RequestBody GatePassDTO gatePassDTO) {
        return ResponseEntity.ok(gatePassService.applyForGatePass(gatePassDTO));
    }
    @PutMapping("/approve/tutor")
    public ResponseEntity<GatePassResponseDTO> approveByTutor(@RequestBody ApprovalDTO approvalDTO) {
        return ResponseEntity.ok(gatePassService.approveByTutor(approvalDTO));
    }
    @PutMapping("/approve/warden")
    public ResponseEntity<GatePassResponseDTO> approveByWarden(@RequestBody ApprovalDTO approvalDTO) {
        return ResponseEntity.ok(gatePassService.approveByWarden(approvalDTO));
    }
   @PutMapping("/approve/security")
    public ResponseEntity<GatePassResponseDTO> approveBySecurity(@RequestBody ApprovalDTO approvalDTO) {
        return ResponseEntity.ok(gatePassService.approveBySecurity(approvalDTO));
    }
    @PutMapping("/reject/{gatePassId}")
    public ResponseEntity<GatePassResponseDTO> rejectGatePass(@PathVariable Long gatePassId) {
        return ResponseEntity.ok(gatePassService.rejectGatePass(gatePassId));
    }
    @GetMapping
    public ResponseEntity<List<GatePassResponseDTO>> getAllGatePasses() {
        return ResponseEntity.ok(gatePassService.getAllGatePasses());
    }
    @GetMapping("/{id}")
    public ResponseEntity<GatePassResponseDTO> getGatePassById(@PathVariable Long id) {
        return ResponseEntity.ok(gatePassService.getGatePassById(id));
    }
}